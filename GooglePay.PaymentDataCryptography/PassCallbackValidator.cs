// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using GooglePay.PaymentDataCryptography.Models;

namespace GooglePay.PaymentDataCryptography
{
    /// <summary>
    /// An implementation of the recipient side of Google Pay API Payment data cryptography.
    ///
    /// This implementation currently only supports version ECv1.
    /// </summary>
    public class PassCallbackValidator
    {
        private const string GooglePassesUrl = "https://pay.google.com/gp/m/issuer/keys";
        private const string GoogleSenderId = "GooglePayPasses";
        private readonly ISignatureKeyProvider _signatureKeyProvider = new GoogleKeyProvider(GooglePassesUrl);
        private readonly SignatureVerification _signatureVerification = new SignatureVerification();

        public PassCallbackValidator()
        {
        }

        internal PassCallbackValidator(Util.IClock clock)
        {
            _signatureVerification = new SignatureVerification(clock);
        }

        /// <summary>
        /// Resolves the inner JSON message, performing the necessary signature verification.
        /// </summary>
        /// <param name="recipientId">Your recipient_id, as provided by Google</param>
        /// <param name="signedMessage">A message generated by the Google Pay API (in JSON format)</param>
        /// <returns>Verified message (in JSON format)</returns>
        /// <exception cref="SecurityException">Thrown when signature cannot be verified.</exception>
        public string Verify(string recipientId, string signedMessage)
        {
            var paymentData = Util.Json.Parse<PaymentData>(signedMessage);
            var innerMessage = Util.Json.Parse<SignedMessage>(paymentData.SignedMessage);

            if (!_signatureVerification.VerifyMessage(paymentData, GoogleSenderId, recipientId, _signatureKeyProvider))
            {
                throw new SecurityException("Cannot verify signature");
            }

            return innerMessage.EncryptedMessage;
        }
    }
}
